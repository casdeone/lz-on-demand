name: 'Update Provider with TFC Details'
on: 
  workflow_call:
    inputs:
      WORKSPACE_NAME:
        description: 'Defines the workspace Name'
        required: true
        type: string
      ORG_NAME:
        description: 'Defines the Terraform Cloud organization name'
        required: true
        type: string
      TFC_REPO:
        description: 'Defines the URL that contains the workspace code'
        required: true
        type: string
      TFC_REPO_BRANCH:
        description: 'Defines the branch that contains the workspace code'
        required: true
        type: string

jobs:
  update-provider-file:
    runs-on: ubuntu-latest
    steps:
    - name: 'Define runtime variables'
      run: |
        mkdir ${{ github.workspace }}/temp
        echo "REPO_TEMP_PATH=${{ github.workspace }}/temp" >> $GITHUB_ENV
    - name: 'Checkout ${{ inputs.TFC_REPO }} that contains the Terraform workspace code'
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.TFC_REPO }}
        path: ${{ env.REPO_TEMP_PATH }}
        token: ${{ secrets.GH_TOKEN }}
        ref: ${{ inputs.TFC_REPO_BRANCH }}
    - name: 'Authenticate to Terraform Cloud and create workspace'
      run: |
        export TF_TOKEN_app_terraform_io=${{ secrets.TFC_TOKEN }}
        cd ${{ env.REPO_TEMP_PATH }}
        terraform init
    - name: 'Update TFC Variable - location'
      uses: cbsinteractive/create-tfc-workspace-variable-action@v1
      with:
        tfcToken: ${{ secrets.TFC_TOKEN }}
        orgName: ${{ inputs.ORG_NAME }}
        workspaceName: ${{ inputs.WORKSPACE_NAME }}
        variableName: location
        category: terraform
        sensitive: false
        value: "centralus"
    - name: 'Update TFC Variable - ARM_SUBSCRIPTION_ID'
      uses: cbsinteractive/create-tfc-workspace-variable-action@v1
      with:
        tfcToken: ${{ secrets.TFC_TOKEN }}
        orgName: ${{ inputs.ORG_NAME }}
        workspaceName: ${{ inputs.WORKSPACE_NAME }}
        variableName: ARM_SUBSCRIPTION_ID
        category: env
        sensitive: true
        value: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    - name: 'Get ID of newly created TFC workspace'
      run: |
        workspaces=$( curl -X GET 'https://app.terraform.io/api/v2/organizations/${{ inputs.ORG_NAME}}/workspaces' \
        --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
        --header "Content-Type: application/vnd.api+json" )
        workspaceId=$( echo $workspaces | jq '.data[] | select ( .attributes.name == "${{ inputs.WORKSPACE_NAME }}" ) | .id ' -r )
        echo "WORKSPACE_ID=$workspaceId" >> $GITHUB_ENV
        echo "workspaceId is $workspaceId"
        if [ -z "$workspaceId" ]; then exit 2 ; fi 
    - name: 'Assign variable set to workspace to authenticate with Hyper scaler'
      run: |
        # Determine ID of existing variable set used to authenticate with Hyper scaler
        variableSets=$( curl -X GET 'https://app.terraform.io/api/v2/organizations/${{ inputs.ORG_NAME}}/varsets' \
        --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
        --header "Content-Type: application/vnd.api+json" )
        varSetId=$( echo $variableSets | jq '.data[] | select ( .attributes.name == "${{ vars.TFC_AZURE_VAR_SET_NAME }}" ) | .id ' -r )
        echo "varSetId is $varSetId"
        if [ -z "$varSetId" ]; then exit 2 ; fi
        # Assign variable set to workspace
        applyOutput=$( curl -X POST "https://app.terraform.io/api/v2/varset/$varSetId/relationships/workspaces" \
        --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
        --header "Content-Type: application/vnd.api+json" \
        --data-raw '{"data": [{"type": "workspaces", "id": "${{ env.WORKSPACE_ID }}"}]}' )
        echo "applyOutput is $applyOutput"
        if [ -n "$applyOutput" ]; then
          applyErrors=$( echo $applyOutput | jq '.errors[]' -r ) 
          echo $applyErrors 
          exit 2 ; 
        fi
    - name: 'Run Terraform Plan'
      run: |
        export TF_TOKEN_app_terraform_io=${{ secrets.TFC_TOKEN }}
        cd ${{ env.REPO_TEMP_PATH }}
        terraform plan



# Next steps:
# 2. Define variables for within the TFC workspace
# 3. Run the Infra workspace to deploy the infra